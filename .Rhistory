getwd()
#!Goal: to simulate 2-way epistasis in a manner that is different from axa, axd, dxa, and dxd.
### Rationale: We will be able to do a better job of quantifying biological epistasis
### While working on this, take a look at Figures 2, 3, and 4 of the following publication:
### doi:10.1093/jxb/erx283 doi:10.1093/jxb/erx283
library(scatterplot3d)
#Source in a function that will draw grids
source("http://www.sthda.com/sthda/RDoc/functions/addgrids3d.r")
#Set the working directory
setwd("C:/Users/aboris/Box/Postdoc_UIUC/Omnigenic_Project/code/Proposal_Aim1")
e_AB <- 0
e_aB <- 0
e_Ab <- 0
# e_ab <- 0
# Consider two biallelic loci, A and B, from a diploid species. Suppose that there are no heterozygotes,
# and that we know the phase of all individuals at these two loci.
# Specify the additive effects at both loci
a_A <- 0
a_B <- 0
##############################################################
## Second way of quantifying epistasis.
# Create one indicator variable if the phase of an individual is  (AA BB) or (aa bb)= same as the parents
# Create another variable indicator if the phase of an individual is (AA bb) or (aa BB) = different from
#   the parents (recombinants).
e_Parent <- 1
e_Recombinant <- -1
#################################################################################
what.are.my.phenotypes <- function(a_A = NULL, a_B = NULL, e_AB = NULL,
e_aB = NULL, e_Ab = NULL, e_Parent = NULL,
e_Recombinant = NULL){
############################################################
####Create the appropriate explanatory variables
###### c(a_A, a_B, e_AB, e_aB, e_Ab, e_Parent, e_Recombinant)
ind.AB <- c(1, 1, 1, 0, 0, 1, 0)
ind.aB <- c(-1, 1, 0, 1, 0, 0, 1)
ind.Ab <- c(1, -1, 0, 0, 1, 0, 1)
ind.ab <- c(-1, -1, 0, 0, 0, 1, 0)
genotypic.data <- rbind(ind.AB, ind.aB, ind.Ab, ind.ab)
genotypic.data <- data.frame(genotypic.data)
colnames(genotypic.data) <- c("a_A", "a_B", "e_AB", "e_aB", "e_Ab", "e_Parent", "e_Recombinant")
#See what corresponding phenotype values (for a trait with broad-sense heritaiblity of 1) you would get after
# after using the above effect sizes
phenotypes.with.indicator.for.epistatic.effects <- ( (a_A*genotypic.data$a_A) + (a_B*genotypic.data$a_B) + (e_AB*genotypic.data$e_AB)
+(e_aB*genotypic.data$e_aB) + (e_Ab*genotypic.data$e_Ab) )
phenotypes.with.Parent.Recombinant.for.epistatic.effects <- ( (a_A*genotypic.data$a_A) + (a_B*genotypic.data$a_B)
+(e_Parent*genotypic.data$e_Parent) + (e_Recombinant*genotypic.data$e_Recombinant))
return.object <- data.frame(cbind(phenotypes.with.indicator.for.epistatic.effects,
phenotypes.with.Parent.Recombinant.for.epistatic.effects))
row.names(return.object) <- c("AB", "aB", "Ab", "ab")
pdf(paste("3d_plot_Add_A_", a_A, "Add_B_", a_B, "_E_P_", e_Parent, "_E_R_2022_Version",
e_Recombinant,".pdf", sep = " "))
scatterplot3d(x=c(1, 0, 1, 0), y=c(1, 1, 0, 0), z = return.object$phenotypes.with.Parent.Recombinant.for.epistatic.effects,
type = "h", color = "red", pch = ".", xlab = "Genotype at locus A", ylab = "Genotype at locus B", zlab = "Observed Phenotype",
xlim = c(-0.5, 1.5), ylim = c(-0.5, 1.5), zlim = c(-3.5, 3.5),
main = paste("Add_A_", a_A, "Add_B_", a_B, "_E_P_", e_Parent, "_E_R_",
e_Recombinant, sep = " "), cex.axis = 1.3, cex.symbols = 2,
cex.lab = 2, lwd = 15)
addgrids3d(x=c(1, 0, 1, 0), y=c(1, 1, 0, 0), z = return.object$phenotypes.with.Parent.Recombinant.for.epistatic.effects,
grid = c("xy", "xz", "yz"),  xlim = c(-0.5, 1.5), ylim = c(-0.5, 1.5), zlim = c(-3.5, 3.5))
scatterplot3d(x=c(1, 0, 1, 0), y=c(1, 1, 0, 0), z = return.object$phenotypes.with.Parent.Recombinant.for.epistatic.effects,
type = "h", color = "purple", pch = ".", xlab = "Genotype at locus A", ylab = "Genotype at locus B", zlab = "Observed Phenotype",
xlim = c(-0.5, 1.5), ylim = c(-0.5, 1.5), zlim = c(-3.5, 3.5),
main = paste("Add_A_", a_A, "Add_B_", a_B, "_E_P_", e_Parent, "_E_R_",
e_Recombinant, sep = " "), cex.axis = 1.3, cex.symbols = 2,
cex.lab = 2, lwd = 15)
dev.off()
return(list(return.object = return.object, label = paste("AA_", a_A, "AB_", a_B, "_EP_", e_Parent, "_ER_",
e_Recombinant, sep = " ")))
#return(list(phenotypes.with.indicator.for.epistatic.effects=phenotypes.with.indicator.for.epistatic.effects,
#            phenotypes.with.Parent.Recombinant.for.epistatic.effects=phenotypes.with.Parent.Recombinant.for.epistatic.effects))
}
#################################################################################
what.are.my.phenotypes <- function(a_A = NULL, a_B = NULL, e_AB = NULL,
e_aB = NULL, e_Ab = NULL, e_Parent = NULL,
e_Recombinant = NULL){
############################################################
####Create the appropriate explanatory variables
###### c(a_A, a_B, e_AB, e_aB, e_Ab, e_Parent, e_Recombinant)
ind.AB <- c(1, 1, 1, 0, 0, 1, 0)
ind.aB <- c(-1, 1, 0, 1, 0, 0, 1)
ind.Ab <- c(1, -1, 0, 0, 1, 0, 1)
ind.ab <- c(-1, -1, 0, 0, 0, 1, 0)
genotypic.data <- rbind(ind.AB, ind.aB, ind.Ab, ind.ab)
genotypic.data <- data.frame(genotypic.data)
colnames(genotypic.data) <- c("a_A", "a_B", "e_AB", "e_aB", "e_Ab", "e_Parent", "e_Recombinant")
#See what corresponding phenotype values (for a trait with broad-sense heritaiblity of 1) you would get after
# after using the above effect sizes
phenotypes.with.indicator.for.epistatic.effects <- ( (a_A*genotypic.data$a_A) + (a_B*genotypic.data$a_B) + (e_AB*genotypic.data$e_AB)
+(e_aB*genotypic.data$e_aB) + (e_Ab*genotypic.data$e_Ab) )
phenotypes.with.Parent.Recombinant.for.epistatic.effects <- ( (a_A*genotypic.data$a_A) + (a_B*genotypic.data$a_B)
+(e_Parent*genotypic.data$e_Parent) + (e_Recombinant*genotypic.data$e_Recombinant))
return.object <- data.frame(cbind(phenotypes.with.indicator.for.epistatic.effects,
phenotypes.with.Parent.Recombinant.for.epistatic.effects))
row.names(return.object) <- c("AB", "aB", "Ab", "ab")
jpg(paste("3d_plot_Add_A_", a_A, "Add_B_", a_B, "_E_P_", e_Parent, "_E_R_2022_Version",
e_Recombinant,".jpg", sep = " "))
scatterplot3d(x=c(1, 0, 1, 0), y=c(1, 1, 0, 0), z = return.object$phenotypes.with.Parent.Recombinant.for.epistatic.effects,
type = "h", color = "red", pch = ".", xlab = "Genotype at locus A", ylab = "Genotype at locus B", zlab = "Observed Phenotype",
xlim = c(-0.5, 1.5), ylim = c(-0.5, 1.5), zlim = c(-3.5, 3.5),
main = paste("Add_A_", a_A, "Add_B_", a_B, "_E_P_", e_Parent, "_E_R_",
e_Recombinant, sep = " "), cex.axis = 1.3, cex.symbols = 2,
cex.lab = 2, lwd = 15)
addgrids3d(x=c(1, 0, 1, 0), y=c(1, 1, 0, 0), z = return.object$phenotypes.with.Parent.Recombinant.for.epistatic.effects,
grid = c("xy", "xz", "yz"),  xlim = c(-0.5, 1.5), ylim = c(-0.5, 1.5), zlim = c(-3.5, 3.5))
scatterplot3d(x=c(1, 0, 1, 0), y=c(1, 1, 0, 0), z = return.object$phenotypes.with.Parent.Recombinant.for.epistatic.effects,
type = "h", color = "purple", pch = ".", xlab = "Genotype at locus A", ylab = "Genotype at locus B", zlab = "Observed Phenotype",
xlim = c(-0.5, 1.5), ylim = c(-0.5, 1.5), zlim = c(-3.5, 3.5),
main = paste("Add_A_", a_A, "Add_B_", a_B, "_E_P_", e_Parent, "_E_R_",
e_Recombinant, sep = " "), cex.axis = 1.3, cex.symbols = 2,
cex.lab = 2, lwd = 15)
dev.off()
return(list(return.object = return.object, label = paste("AA_", a_A, "AB_", a_B, "_EP_", e_Parent, "_ER_",
e_Recombinant, sep = " ")))
#return(list(phenotypes.with.indicator.for.epistatic.effects=phenotypes.with.indicator.for.epistatic.effects,
#            phenotypes.with.Parent.Recombinant.for.epistatic.effects=phenotypes.with.Parent.Recombinant.for.epistatic.effects))
}# End what.are.my.phenotypes()
############################################################################################
#Testing the function above
#Run the code for the "what.are.my.phenotypes()" function starting on Line 48
what.are.my.phenotypes(a_A, a_B, e_AB,
e_aB, e_Ab, e_Parent,
e_Recombinant)
#################################################################################
what.are.my.phenotypes <- function(a_A = NULL, a_B = NULL, e_AB = NULL,
e_aB = NULL, e_Ab = NULL, e_Parent = NULL,
e_Recombinant = NULL){
############################################################
####Create the appropriate explanatory variables
###### c(a_A, a_B, e_AB, e_aB, e_Ab, e_Parent, e_Recombinant)
ind.AB <- c(1, 1, 1, 0, 0, 1, 0)
ind.aB <- c(-1, 1, 0, 1, 0, 0, 1)
ind.Ab <- c(1, -1, 0, 0, 1, 0, 1)
ind.ab <- c(-1, -1, 0, 0, 0, 1, 0)
genotypic.data <- rbind(ind.AB, ind.aB, ind.Ab, ind.ab)
genotypic.data <- data.frame(genotypic.data)
colnames(genotypic.data) <- c("a_A", "a_B", "e_AB", "e_aB", "e_Ab", "e_Parent", "e_Recombinant")
#See what corresponding phenotype values (for a trait with broad-sense heritaiblity of 1) you would get after
# after using the above effect sizes
phenotypes.with.indicator.for.epistatic.effects <- ( (a_A*genotypic.data$a_A) + (a_B*genotypic.data$a_B) + (e_AB*genotypic.data$e_AB)
+(e_aB*genotypic.data$e_aB) + (e_Ab*genotypic.data$e_Ab) )
phenotypes.with.Parent.Recombinant.for.epistatic.effects <- ( (a_A*genotypic.data$a_A) + (a_B*genotypic.data$a_B)
+(e_Parent*genotypic.data$e_Parent) + (e_Recombinant*genotypic.data$e_Recombinant))
return.object <- data.frame(cbind(phenotypes.with.indicator.for.epistatic.effects,
phenotypes.with.Parent.Recombinant.for.epistatic.effects))
row.names(return.object) <- c("AB", "aB", "Ab", "ab")
jpeg(paste("3d_plot_Add_A_", a_A, "Add_B_", a_B, "_E_P_", e_Parent, "_E_R_2022_Version",
e_Recombinant,".jpg", sep = " "))
scatterplot3d(x=c(1, 0, 1, 0), y=c(1, 1, 0, 0), z = return.object$phenotypes.with.Parent.Recombinant.for.epistatic.effects,
type = "h", color = "red", pch = ".", xlab = "Genotype at locus A", ylab = "Genotype at locus B", zlab = "Observed Phenotype",
xlim = c(-0.5, 1.5), ylim = c(-0.5, 1.5), zlim = c(-3.5, 3.5),
main = paste("Add_A_", a_A, "Add_B_", a_B, "_E_P_", e_Parent, "_E_R_",
e_Recombinant, sep = " "), cex.axis = 1.3, cex.symbols = 2,
cex.lab = 2, lwd = 15)
addgrids3d(x=c(1, 0, 1, 0), y=c(1, 1, 0, 0), z = return.object$phenotypes.with.Parent.Recombinant.for.epistatic.effects,
grid = c("xy", "xz", "yz"),  xlim = c(-0.5, 1.5), ylim = c(-0.5, 1.5), zlim = c(-3.5, 3.5))
scatterplot3d(x=c(1, 0, 1, 0), y=c(1, 1, 0, 0), z = return.object$phenotypes.with.Parent.Recombinant.for.epistatic.effects,
type = "h", color = "purple", pch = ".", xlab = "Genotype at locus A", ylab = "Genotype at locus B", zlab = "Observed Phenotype",
xlim = c(-0.5, 1.5), ylim = c(-0.5, 1.5), zlim = c(-3.5, 3.5),
main = paste("Add_A_", a_A, "Add_B_", a_B, "_E_P_", e_Parent, "_E_R_",
e_Recombinant, sep = " "), cex.axis = 1.3, cex.symbols = 2,
cex.lab = 2, lwd = 15)
dev.off()
return(list(return.object = return.object, label = paste("AA_", a_A, "AB_", a_B, "_EP_", e_Parent, "_ER_",
e_Recombinant, sep = " ")))
#return(list(phenotypes.with.indicator.for.epistatic.effects=phenotypes.with.indicator.for.epistatic.effects,
#            phenotypes.with.Parent.Recombinant.for.epistatic.effects=phenotypes.with.Parent.Recombinant.for.epistatic.effects))
}# End what.are.my.phenotypes()
############################################################################################
#Testing the function above
#Run the code for the "what.are.my.phenotypes()" function starting on Line 48
what.are.my.phenotypes(a_A, a_B, e_AB,
e_aB, e_Ab, e_Parent,
e_Recombinant)
what.are.my.phenotypes(a_A = 1, a_B = 1, e_AB,
e_aB, e_Ab, e_Parent = 2,
e_Recombinant)
what.are.my.phenotypes(a_A = 1, a_B = 1, e_AB,
e_aB, e_Ab, e_Parent = 1,
e_Recombinant)
############################################################################################
#Testing the function above
#Run the code for the "what.are.my.phenotypes()" function starting on Line 48
what.are.my.phenotypes(a_A = 1, a_B = 1, e_AB,
e_aB, e_Ab, e_Parent = 0,
e_Recombinant = 0)
setwd("~/Omnigenic_project_onedrive/ViSAGE")
rm(list = ls())
source("app.R")
shiny::runApp()
